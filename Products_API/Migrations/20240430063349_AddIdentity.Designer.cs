// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Products_API.Data;

#nullable disable

namespace Products_API.Migrations
{
    [DbContext(typeof(ShopContext))]
    [Migration("20240430063349_AddIdentity")]
    partial class AddIdentity
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("Products")
                .HasAnnotation("ProductVersion", "7.0.14")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", "Products");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", "Products");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", "Products");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", "Products");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", "Products");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", "Products");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", "Products");
                });

            modelBuilder.Entity("Products_API.Data.Product", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Photo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("QuantityInStock")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Products", "Products");

                    b.HasData(
                        new
                        {
                            Id = new Guid("2bcffbf6-c7ee-4697-bddb-51edf8392020"),
                            Category = "Electronics",
                            Name = "Laptop",
                            Photo = "",
                            Price = 999.99m,
                            QuantityInStock = 15
                        },
                        new
                        {
                            Id = new Guid("ff82e9c7-cc1a-4075-ae64-90bafb30810a"),
                            Category = "Education",
                            Name = "Book",
                            Photo = "",
                            Price = 19.99m,
                            QuantityInStock = 100
                        },
                        new
                        {
                            Id = new Guid("6ff420f0-3aa8-4175-818d-69ee902c2eeb"),
                            Category = "Electronics",
                            Name = "Headphones",
                            Photo = "",
                            Price = 49.99m,
                            QuantityInStock = 30
                        },
                        new
                        {
                            Id = new Guid("c64f5e43-368b-4973-aea7-15ba1b7dafa8"),
                            Category = "Apparel",
                            Name = "T-shirt",
                            Photo = "",
                            Price = 12.99m,
                            QuantityInStock = 50
                        },
                        new
                        {
                            Id = new Guid("eab5e86c-4806-42c4-9d9e-39abf9f674ad"),
                            Category = "Electronics",
                            Name = "Smartphone",
                            Photo = "",
                            Price = 699.99m,
                            QuantityInStock = 25
                        },
                        new
                        {
                            Id = new Guid("e204027b-7edb-4eb5-b58b-e3aa351213e4"),
                            Category = "Kitchen",
                            Name = "Coffee Mug",
                            Photo = "",
                            Price = 9.99m,
                            QuantityInStock = 75
                        },
                        new
                        {
                            Id = new Guid("527b6054-7333-4df8-8611-763d2287655d"),
                            Category = "Home Office",
                            Name = "Desk Lamp",
                            Photo = "",
                            Price = 29.99m,
                            QuantityInStock = 20
                        },
                        new
                        {
                            Id = new Guid("a7252c47-5b66-4d00-9341-ebcac68cdda6"),
                            Category = "Footwear",
                            Name = "Running Shoes",
                            Photo = "",
                            Price = 79.99m,
                            QuantityInStock = 40
                        },
                        new
                        {
                            Id = new Guid("1474695d-8917-4eb1-885f-51405e84c328"),
                            Category = "Accessories",
                            Name = "Backpack",
                            Photo = "",
                            Price = 39.99m,
                            QuantityInStock = 60
                        },
                        new
                        {
                            Id = new Guid("c1e04c29-b842-4361-bd4a-f408ba388a4b"),
                            Category = "Electronics",
                            Name = "External Hard Drive",
                            Photo = "",
                            Price = 129.99m,
                            QuantityInStock = 10
                        },
                        new
                        {
                            Id = new Guid("780daec1-d4b0-40a2-86e0-33d36f0c4ee5"),
                            Category = "Fitness",
                            Name = "Yoga Mat",
                            Photo = "",
                            Price = 24.99m,
                            QuantityInStock = 35
                        },
                        new
                        {
                            Id = new Guid("b21450c0-b711-474c-b54d-a8ecc371994c"),
                            Category = "Stationery",
                            Name = "Pencil Set",
                            Photo = "",
                            Price = 7.99m,
                            QuantityInStock = 80
                        },
                        new
                        {
                            Id = new Guid("dc92d008-c4c2-45f4-aa3a-eca93ca67c5b"),
                            Category = "Furniture",
                            Name = "Gaming Chair",
                            Photo = "",
                            Price = 199.99m,
                            QuantityInStock = 5
                        },
                        new
                        {
                            Id = new Guid("cc7ee6ef-9f08-4d46-8429-241ad088c83b"),
                            Category = "Accessories",
                            Name = "Sunglasses",
                            Photo = "",
                            Price = 59.99m,
                            QuantityInStock = 45
                        },
                        new
                        {
                            Id = new Guid("6488084c-0361-4073-ba32-c9238b135ea3"),
                            Category = "Electronics",
                            Name = "Bluetooth Speaker",
                            Photo = "",
                            Price = 89.99m,
                            QuantityInStock = 18
                        },
                        new
                        {
                            Id = new Guid("c20ef97c-484b-4a0d-8ce5-e9afbf6277c0"),
                            Category = "Stationery",
                            Name = "Notebook",
                            Photo = "",
                            Price = 4.99m,
                            QuantityInStock = 120
                        },
                        new
                        {
                            Id = new Guid("d4e49fe7-0d5a-41f6-a0c0-43d1637a237f"),
                            Category = "Gardening",
                            Name = "Gardening Gloves",
                            Photo = "",
                            Price = 14.99m,
                            QuantityInStock = 55
                        },
                        new
                        {
                            Id = new Guid("7241af14-83eb-4bb2-a540-fe857cfe1f4e"),
                            Category = "Kitchen",
                            Name = "Cooking Utensils Set",
                            Photo = "",
                            Price = 29.99m,
                            QuantityInStock = 25
                        },
                        new
                        {
                            Id = new Guid("faa7abda-f35f-43ea-95a5-8d85168d71b7"),
                            Category = "Travel",
                            Name = "Hiking Backpack",
                            Photo = "",
                            Price = 69.99m,
                            QuantityInStock = 30
                        },
                        new
                        {
                            Id = new Guid("72caf547-182a-4f7e-9e66-9792dacd3850"),
                            Category = "Electronics",
                            Name = "Power Bank",
                            Photo = "",
                            Price = 49.99m,
                            QuantityInStock = 40
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
